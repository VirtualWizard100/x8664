1. push rbp pushes the current frame pointer onto the stack to return from the function with								    - = byte filled
2. mov rbp, rsp copies the stack pointer to the base pointer, making a new stack frame									    . = byte empty
3. sub rsp, 0x10 subtracts 16 bytes from the stack pointer to make room for 2 8 byte variables (in C, argc, and argv)					    argc = argv[0]
4. mov DWORD PTR [rbp-0x4], edi moves the 4 byte argc 32 bit DWORD arguement into the -4 offset of rbp that rsp created when you subtracted 16 bytes from it (....argc)
5. mov QWORD PTR [rbp-0x10], rsi moves the 8 byte argv QWORD arguement into the -16 offset of rbp that rsp created when you subtracted 16 bytes from it	     (argv----)
6. jmp 40055a <main+0x34> jumps to address 40055a, or 400526 main + 0x34
7. 40055a: cmp DWORD PTR [rbp-0x4], 0x0 compares argv[0]/argc to 0, checking to see if argc is null terminated yet					     top
8. jg 400537 <main+0x11> checks if argv[0]/argc was greater than 0x0, if so, it jumps back to 400537 (400526 + 17 bytes(0x11))				     (argv----
9. 400537: subtract 1 from argc, making it to where argc is pointing to the next last character's address in argv					     ....argc)
10.move the argc pointer address that's now pointing to a new character into eax								             bottom
11.move the value of the argc pointer into eax
12.move the address in rax(argv) with the offset of 8 (argc) into rdx, making rdx equal to the new character in argc
13.move the address of argv[] into rax
14.add the offset of argc's new character to the argv[] address in rax
15.load the ascii value of the new character into rax
16.move the new ascii character into rdi, making it the first arguement in the puts function
17.call puts, printing out the new character


1.	400526: push rbp
2.	400527: mov rbp, rsp
3.	40052a: sub rsp, 0x10
4.	40052e: mov DWORD PTR [rbp-0x4], edi
5.	400531: mov QWORD PTR [rbp-0x10], esi
6.	400535: jmp 40055a <main+0x34>
9.	400537: sub DWORD PTR [rbp-0x4], 0x1
10.	40053b: mov eax, DWORD PTR [rbp-0x4]
11.	40053e: mov eax, eax
12.	400540: lea rdx, [rdx*8+0x0]
13.	400548: mov rax, QWORD PTR [rbp-0x10]
14.	40054c: add rax, rdx
15.	40054f: mov rax, QWORD PTR [rax]
16.	400552: mov rdi, rax
17.	400555: call 400400 <puts@plt>
7.	40055a: cmp DWORD PTR [rbp-0x4], 0x0
8.	40055e: jg 400537 <main+0x11>
	400560: mov eax, 0x0	;Clear the eax register
